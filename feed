<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Pyloons'Notes</title><link href="http://www.pyloons.com/" rel="alternate"></link><link href="http://www.pyloons.com/feed" rel="self"></link><id>http://www.pyloons.com/</id><updated>2017-11-20T22:52:00+08:00</updated><entry><title>Python量化交易学习之numpy基础（中）</title><link href="http://www.pyloons.com/python%E9%87%8F%E5%8C%96%E4%BA%A4%E6%98%93%E5%AD%A6%E4%B9%A0%E4%B9%8Bnumpy%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%AD%EF%BC%89.html" rel="alternate"></link><published>2017-11-20T22:52:00+08:00</published><updated>2017-11-20T22:52:00+08:00</updated><author><name>Pyloons</name></author><id>tag:www.pyloons.com,2017-11-20:/python量化交易学习之numpy基础（中）.html</id><summary type="html"></summary><content type="html">&lt;p&gt;在&lt;a href="http://www.pyloons.com/python%E9%87%8F%E5%8C%96%E4%BA%A4%E6%98%93%E5%AD%A6%E4%B9%A0%E4%B9%8Bnumpy%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%8A%EF%BC%89.html"&gt;上一篇&lt;/a&gt;中，我复习了numpy的基础知识，这一篇我将继续复习numpy的&lt;strong&gt;统计函数&lt;/strong&gt;，与基础操作不同的是，这一篇与量化分析有一定的直接联系。&lt;/p&gt;
&lt;h3&gt;这一篇介绍了哪些函数&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;np.mean() 期望。期望是指每次可能结果的概率乘以其结果的总和，反应一组数据平均取值，用于表示分布的中心位置。&lt;/li&gt;
&lt;li&gt;np.var() 方差。衡量一组数据的离散程度。数据与期望之间的离散程度越大，方差越大。&lt;/li&gt;
&lt;li&gt;np.std() 标准差。方差的平方根，与方差一样都表示离散程度，但是由于其单位与变量一致，故使用更频繁。&lt;/li&gt;
&lt;li&gt;np.min()和np.max() 其作用不必赘述，但是有个很有意思的特点是，这两个方法都有个参数叫axis，就目前学习到的知识，这个参数可以取0或者1两个数字，如果取0，被处理的矩阵按列处理，如果取1则按行处理。&lt;/li&gt;
&lt;li&gt;np.argmin()和np.argmax() 上面的min和max只能计算出最小或者最大的那个值，而这两个方法能计算出最小或者最大值的位置。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;超纲内容&lt;/h3&gt;
&lt;p&gt;这篇文章引入了一部分matplotlib的陌生知识，主要是用来绘图；这就比较新手不友好了。&lt;/p&gt;
&lt;p&gt;这部分内容我不会过于深究，而是到绘制图表的章节再具体总结。&lt;/p&gt;</content></entry><entry><title>Python量化交易学习之numpy基础（上）</title><link href="http://www.pyloons.com/python%E9%87%8F%E5%8C%96%E4%BA%A4%E6%98%93%E5%AD%A6%E4%B9%A0%E4%B9%8Bnumpy%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%8A%EF%BC%89.html" rel="alternate"></link><published>2017-11-20T00:27:00+08:00</published><updated>2017-11-20T00:27:00+08:00</updated><author><name>Pyloons</name></author><id>tag:www.pyloons.com,2017-11-20:/python量化交易学习之numpy基础（上）.html</id><summary type="html"></summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;几个星期前购买了一本关于使用Python进行股票量化交易的书。本着进可以进入股市搜刮钱财，退可以学习机器学习的基本技能的心态，我开始学习这门入门书籍。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Python的数据处理工具与网络框架比起来，虽然复杂程度低，但是要用好它们，需要更多的是自己对数据的思考——代码简单，而自己对数据没有想法，不知道如何处理才是数据分析或者机器学习的学习者的硬伤。&lt;/p&gt;
&lt;p&gt;本书该章节主要分成了4个小节。并行化思想与基础操作、基础统计概念与函数使用、正态分布、伯努利分布。由于原书的内容比例，该章分成3篇来复习，&lt;strong&gt;这篇文章主要讲numpy的基础操作&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;作者在这一节的开始和这个章节的结尾都言明并行化思想的重要性。然而并行化思想仅仅对于开发者更重要；Matlab算得快又好就用Matlab，R快又好就用R，Python快又好就用Python，对于使用这些工具的数据工作者，它们的好坏快慢难易，只有“用”或者“不用”的区别。&lt;/p&gt;
&lt;p&gt;以下汇总基本内容：&lt;/p&gt;
&lt;h3&gt;并行化的体现(与普通列表的区别)&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;numpy构建一个数组，比普通列表构造器构建一个列表，速度快了不止一个数量级；这是并行化带来的优势——&lt;strong&gt;确实所有人都关心效率，但这并不是数据分析的核心工作&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;np数组和普通列表在使用运算符的时候表现也不一样：np数组是所有元素都参与运算，而普通列表则是操作自己这个列表本身；也就是把自己所有的元素都乘以3和把自己的长度扩张3倍的区别。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;初始化np数组（生成初始数据）&lt;/h3&gt;
&lt;p&gt;首先，来看看这章的基础部分提到了哪些初始化的方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;np.arange()：这个方法返回一个np数组，常用参数为start、stop、step，参数意义就不用赘述了，需要一提的是，只有stop是必要参数，start默认为0，step默认为1，并且给出step时必须指定start；&lt;/li&gt;
&lt;li&gt;np.zeros()、np.ones()、np.empty()：这三个方法参数相同，默认至少需要一个shape参数，shape可以是个int，也可以是个由int组成的tuple，生成对应维数的、内容分别为&lt;strong&gt;0、1、随机数&lt;/strong&gt;的np数组&lt;/li&gt;
&lt;li&gt;np.array()、np.zeros_like()、np.ones_like()：这三个方法返回一个np数组，需要一个“长得像数组”的对象来初始化，分别返回&lt;strong&gt;内容与参数相同的np数组、shape与参数相同但内容全是0的np数组、shape与参数相同但内容全是1的np数组&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;np.eye()：生成行列数量相等，但是对角线全为1的矩阵；接受一个整数参数作为返回的矩阵的行列数量；&lt;/li&gt;
&lt;li&gt;np.linspace()：这个方法与array有相似的地方，前两个参数也类似于start和stop，但第三个参数，假设叫n，并不是步长，而是在start和stop之间生成n-2个等分点，和start与stop一起有序放进np数组。&lt;/li&gt;
&lt;li&gt;np.random.standard_normal()：其实这个方法与np.empty基本是一回事，但是唯一的区别是，这个方法生成的数据服从正态分布（关于数学概念其实我也比较懵）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;初始化这一小节有一个对于这一章十分重要的操作，即通过以下代码生成了&lt;strong&gt;用于讲解这个章节所有内容的虚拟股票涨跌数据&lt;/strong&gt;：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;1&lt;/span&gt;
&lt;span class="code-line"&gt;2&lt;/span&gt;
&lt;span class="code-line"&gt;3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;stock_cnt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;view_days&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;504&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;stock_day_change&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;standard_normal&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;stock_cnt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;view_days&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h3&gt;序列化操作（保存数据）&lt;/h3&gt;
&lt;p&gt;序列化说得通俗易懂一点就是把程序里生成的数据作为一个文件保存在你的硬盘上。这部分内容本来是这一节的最后一个小节，但我认为把它放在数据生成之后紧接着的地方更有助于思维连续。&lt;/p&gt;
&lt;p&gt;生成序列化文件如下：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;./gen/stock_day_change&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stock_day_change&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;这样就会在当前目录的gen目录下生成一个叫stock_day_change.npy的文件；如果目录不存在，只会报错，不会自动生成。&lt;/p&gt;
&lt;p&gt;想要取用也很简单，例如：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;load_changes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;./gen/stock_day_change.npy&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h3&gt;索引和切片（选取数据的范围）&lt;/h3&gt;
&lt;p&gt;这一小节的内容其实很简单，就讲了两个知识点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;np数组的切片可以写成类似于这样的形式&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;python
   stock_day_change[:2, :5]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;它的意义是，第一个切片操作的对象是数组的第一维度，第二个操作第二维度，以此类推。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;copy()函数。上一条中的操作，返回的是这个对象的引用，所以如果用来进行互换操作将会丢失数据，而copy()则会使切片操作指向对象的元素本身，而不仅仅是元素们的引用。用法例如：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;python
   stock_day_change[:2, :5].copy()&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;数据转换与规整（对数据进行处理）&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;转换成整数：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;python
   stock_day_change[:2, :5].astype(int)&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;限制小数位数（例如保留两位小数）：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;python
   np.around(stock_day_change[:2, :5], 2)&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;处理数据缺失：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;把某个元素至为nan：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python
  tmp_test[0][0] = np.nan&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;把数组中的nan用0代替：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python
  tmp_test = np.nan_to_num(tmp_test)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;条件筛选（选取符合条件的数据）&lt;/h3&gt;
&lt;p&gt;同上面小节一样，这些操作统统只适用于numpy数组&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;生成符合条件的元素的标记mask：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;python
   mask = tmp_test &amp;gt; 0.5 # 这里的tmp_test是个有内容的np数组&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用上述mask筛选数据，该用法返回一个只含有筛选结果的np数组：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;python
   tmp_test[mask]&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;对符合条件的数据进行操作：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;python
   tmp_test[tmp_test &amp;gt; 0.5] = 1&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;多重条件，有与（|）和并（&amp;amp;）连接符，并且每个条件用括号括起来：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;python
   tmp_test[(tmp_test &amp;gt; 1) | (tmp_test &amp;lt; -1)]&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;通用序列函数（可能是数据处理和筛选的更工程化的方法）&lt;/h3&gt;
&lt;p&gt;由于是函数，具体内容可以参考help文档，这里就简单带过&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;np.all()：接受一个mask作为参数，要求mask的元素全为True，否则返回False；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;np.any()：同样接受一个mask，但mask内有一个True，就会返回True；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;np.maximum()和np.minimum()：同样接受两个np数组作为参数，会将两个数组对应的元素两两比较，留下较大的或较小的，放在返回的数组的对应位置上；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;np.unique()：接受一个np数组作为参数，去重，然后返回去重后的数组；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;np.diff()：这个函数比较奇妙，总体上来讲是根据一定的方向，计算元素间的差值；建议积极使用以掌握用法，一两句话讲不清，具体查看help文档或者重新翻书；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;np.where()：据说这个函数十分重要。该函数接收三个参数，第一个参数是个mask，如果第一个参数成立，则把第一个参数中的数组&lt;strong&gt;符合条件&lt;/strong&gt;的元素换成第二个参数，如果不成立，就换成第三个参数（或者第三个参数对应位置的内容）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果你要使用符合条件，请使用np.logical_and()和np.logical_or()&lt;/p&gt;
&lt;h3&gt;写在最后&lt;/h3&gt;
&lt;p&gt;这一篇对于任何一个码农来说都是很简单的，这容易导致一个错觉，让人觉得什么数据分析什么量化交易会写代码就能学。其实不是这样的。下一篇会复习统计及其函数，同样会让码农强化我刚才说的想法。不过到第三篇，讲到一部分策略的应用的时候就不会这样想了，那时候工具啊代码啊都是浮云，股票市场的投机逻辑思维才是最具有指导性的。&lt;/p&gt;
&lt;p&gt;Python是一门无所不能的语言，但是谈到其优越性，必然是围绕机器学习的。软件开发略逊于Java和C；移动平台明显劣于Java系；网络开发也只是做到与Java和PHP平分秋色；硬件开发相比较C而言，只能说勉强有一点点解决方案。唯有围绕机器学习展开的数据分析、模型训练等等，明显超越同一个范畴的R和MATLAB。&lt;/p&gt;
&lt;p&gt;对于时间紧迫的我，也只有小步快跑才能避免失败了。&lt;/p&gt;</content></entry><entry><title>搭建Python驱动测试开发学习环境</title><link href="http://www.pyloons.com/%E6%90%AD%E5%BB%BApython%E6%B5%8B%E8%AF%95%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%8E%AF%E5%A2%83.html" rel="alternate"></link><published>2017-11-17T22:40:00+08:00</published><updated>2017-11-17T22:40:00+08:00</updated><author><name>Pyloons</name></author><id>tag:www.pyloons.com,2017-11-17:/搭建python测试驱动开发学习环境.html</id><summary type="html"></summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;本来打算在Debian下搭建测试驱动开发学习环境，不过不知道是lxde不给力还是怎么，geckodriver始终不能正常工作，于是回到了Deepin的怀抱……&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;环境简介&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;操作系统&lt;/strong&gt; Deepin 15.4.1&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Python版本&lt;/strong&gt; Python 3.4&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;包管理器&lt;/strong&gt; pip&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Django版本&lt;/strong&gt; Django 1.7&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;其他工具&lt;/strong&gt; Selenium&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;浏览器&lt;/strong&gt; Firefox 52&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;部署过程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;安装操作系统&lt;/li&gt;
&lt;li&gt;下载系统镜像文件&lt;/li&gt;
&lt;li&gt;在Windows下解压文件，取出其中安装盘制作工具&lt;/li&gt;
&lt;li&gt;插入U盘制作安装盘&lt;/li&gt;
&lt;li&gt;针对目标机器安装系统&lt;/li&gt;
&lt;li&gt;安装Python 3.4&lt;/li&gt;
&lt;li&gt;操作系统自带2.7和3.5版本的Python，通过apt-get安装Python3.4&lt;/li&gt;
&lt;li&gt;安装pip（Python3.5）&lt;/li&gt;
&lt;li&gt;将系统下/usr/bin中的&lt;code&gt;python&lt;/code&gt;软连接从python2改为python3&lt;/li&gt;
&lt;li&gt;通过apt-get安装python3-pip&lt;/li&gt;
&lt;li&gt;通过pip安装virtualenv和virtualenvwrapper&lt;/li&gt;
&lt;li&gt;创建指定Python3.4为解释器的虚拟环境&lt;/li&gt;
&lt;li&gt;虚拟环境内，通过pip安装Django1.7和最新版Selenium&lt;/li&gt;
&lt;li&gt;下载最新版geckodriver，解压至上述虚拟环境的python文件所在位置&lt;/li&gt;
&lt;li&gt;书写第一个测试程序，正常报错，环境搭建完毕&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;经验教训&lt;/h2&gt;
&lt;p&gt;唯一的经验教训就是&lt;strong&gt;不要在不熟悉的发行版上学习&lt;/strong&gt;，容易踩到深坑里&lt;/p&gt;</content><category term="Django"></category><category term="TDD"></category><category term="Python"></category></entry><entry><title>慕课网Less基础教程学习笔记</title><link href="http://www.pyloons.com/%E6%85%95%E8%AF%BE%E7%BD%91less%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html" rel="alternate"></link><published>2017-10-06T20:55:00+08:00</published><updated>2017-10-06T20:55:00+08:00</updated><author><name>Pyloons</name></author><id>tag:www.pyloons.com,2017-10-06:/慕课网less基础教程学习笔记.html</id><summary type="html">&lt;p&gt;说真的学前端技术也是无奈；但是要拿出自己的产品，怎么能等着人家给你做好网页让你填？&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="koala" src="http://pyloons.pythonanywhere.com/media/images/koala.2e16d0ba.fill-800x450.jpg"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;less是一种可编译为css的文本文件，文件名为*.less，开头通常需要设置charset，常为“@charset utf-8”，其他部分与css类似。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;编译less文件可以使用Node.js工具，也可以用浏览器工具；有一个简单的解决办法是使用国产开源软件Koala，该软件由oklai发布在GitHub上。由于几乎是一键安装并监听文件的实时编译，所以使用十分简便，对后端工程师开发网站前端是一种便利的工具。&lt;/p&gt;
&lt;h3&gt;1 语法基础&lt;/h3&gt;
&lt;p&gt;包括注释、变量、混合、匹配、运算、嵌套、@arguments变量、避免编译等。&lt;/p&gt;
&lt;h4&gt;1.1 注释&lt;/h4&gt;
&lt;p&gt;有&lt;code&gt;/**/&lt;/code&gt;和&lt;code&gt;//&lt;/code&gt;两种，前一种会在编译后的CSS文件中保留，后一种不会。&lt;/p&gt;
&lt;h4&gt;1.2 变量&lt;/h4&gt;
&lt;p&gt;格式为&lt;code&gt;@变量名:变量值;&lt;/code&gt;，定义完成后，可以在less文件中对对象属性进行赋值。例如：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;1&lt;/span&gt;
&lt;span class="code-line"&gt;2&lt;/span&gt;
&lt;span class="code-line"&gt;3&lt;/span&gt;
&lt;span class="code-line"&gt;4&lt;/span&gt;
&lt;span class="code-line"&gt;5&lt;/span&gt;
&lt;span class="code-line"&gt;6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;@test_width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;300px&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;box&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;test_width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;test_width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h4&gt;1.3  混合&lt;/h4&gt;
&lt;p&gt;代码举例：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="code-line"&gt; 1&lt;/span&gt;
&lt;span class="code-line"&gt; 2&lt;/span&gt;
&lt;span class="code-line"&gt; 3&lt;/span&gt;
&lt;span class="code-line"&gt; 4&lt;/span&gt;
&lt;span class="code-line"&gt; 5&lt;/span&gt;
&lt;span class="code-line"&gt; 6&lt;/span&gt;
&lt;span class="code-line"&gt; 7&lt;/span&gt;
&lt;span class="code-line"&gt; 8&lt;/span&gt;
&lt;span class="code-line"&gt; 9&lt;/span&gt;
&lt;span class="code-line"&gt;10&lt;/span&gt;
&lt;span class="code-line"&gt;11&lt;/span&gt;
&lt;span class="code-line"&gt;12&lt;/span&gt;
&lt;span class="code-line"&gt;13&lt;/span&gt;
&lt;span class="code-line"&gt;14&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;box&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;test_width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;test_width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="err"&gt;.border&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;border&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;solid&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt; &lt;span class="kc"&gt;pink&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;box2&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="err"&gt;.box&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;margin-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;混合的方法还可以带参数，作为带参混合方法，如果没有被调用，默认是不会被直接编译在CSS里的：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;1&lt;/span&gt;
&lt;span class="code-line"&gt;2&lt;/span&gt;
&lt;span class="code-line"&gt;3&lt;/span&gt;
&lt;span class="code-line"&gt;4&lt;/span&gt;
&lt;span class="code-line"&gt;5&lt;/span&gt;
&lt;span class="code-line"&gt;6&lt;/span&gt;
&lt;span class="code-line"&gt;7&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;border_02&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;@border_width&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;solid&lt;/span&gt; &lt;span class="kc"&gt;pink&lt;/span&gt; &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;border_width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;test_mixin&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="err"&gt;.border_02(30px)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;混合方法带参数，还可以带默认值:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;1&lt;/span&gt;
&lt;span class="code-line"&gt;2&lt;/span&gt;
&lt;span class="code-line"&gt;3&lt;/span&gt;
&lt;span class="code-line"&gt;4&lt;/span&gt;
&lt;span class="code-line"&gt;5&lt;/span&gt;
&lt;span class="code-line"&gt;6&lt;/span&gt;
&lt;span class="code-line"&gt;7&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;border_03&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;@border_width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;10px&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="err"&gt;//这里有默认值&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="kc"&gt;solid&lt;/span&gt; &lt;span class="kc"&gt;green&lt;/span&gt; &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;border_width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;test_mixin_03&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="err"&gt;.border_03()&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="err"&gt;//如果没有带默认值，这样写，是要报错的&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;另外在处理浏览器兼容性问题上，用带默认值的带参混合，是可以很方便书写的。&lt;/p&gt;
&lt;h4&gt;1.4 匹配&lt;/h4&gt;
&lt;p&gt;与其他编程语言中的条件判断十分接近，但又有所不同。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="code-line"&gt; 1&lt;/span&gt;
&lt;span class="code-line"&gt; 2&lt;/span&gt;
&lt;span class="code-line"&gt; 3&lt;/span&gt;
&lt;span class="code-line"&gt; 4&lt;/span&gt;
&lt;span class="code-line"&gt; 5&lt;/span&gt;
&lt;span class="code-line"&gt; 6&lt;/span&gt;
&lt;span class="code-line"&gt; 7&lt;/span&gt;
&lt;span class="code-line"&gt; 8&lt;/span&gt;
&lt;span class="code-line"&gt; 9&lt;/span&gt;
&lt;span class="code-line"&gt;10&lt;/span&gt;
&lt;span class="code-line"&gt;11&lt;/span&gt;
&lt;span class="code-line"&gt;12&lt;/span&gt;
&lt;span class="code-line"&gt;13&lt;/span&gt;
&lt;span class="code-line"&gt;14&lt;/span&gt;
&lt;span class="code-line"&gt;15&lt;/span&gt;
&lt;span class="code-line"&gt;16&lt;/span&gt;
&lt;span class="code-line"&gt;17&lt;/span&gt;
&lt;span class="code-line"&gt;18&lt;/span&gt;
&lt;span class="code-line"&gt;19&lt;/span&gt;
&lt;span class="code-line"&gt;20&lt;/span&gt;
&lt;span class="code-line"&gt;21&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;triangle&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;top&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;@w&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;5px&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;@c&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="nn"&gt;ccc&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;border-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;border-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;transparent&lt;/span&gt; &lt;span class="kc"&gt;transparent&lt;/span&gt; &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="kc"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;border-style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;dashed&lt;/span&gt; &lt;span class="kc"&gt;dashed&lt;/span&gt; &lt;span class="kc"&gt;solid&lt;/span&gt; &lt;span class="kc"&gt;dashed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;triangle&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;bottom&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;@w&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;5px&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;@c&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="nn"&gt;ccc&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;border-width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;border-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="kc"&gt;transparent&lt;/span&gt; &lt;span class="kc"&gt;transparent&lt;/span&gt; &lt;span class="kc"&gt;transparent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;border-style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;solid&lt;/span&gt; &lt;span class="kc"&gt;dashed&lt;/span&gt; &lt;span class="kc"&gt;dashed&lt;/span&gt; &lt;span class="kc"&gt;dashed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;triangle&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;@_&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;@w&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;5px&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;@c&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="nn"&gt;ccc&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;overflow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;hidden&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;sanjiao&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="err"&gt;.triangle(bottom,&lt;/span&gt; &lt;span class="err"&gt;100px)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;上面是匹配的一种写法，用于多个匹配中共同代码的统一一次性书写。匹配的核心原则是，你填的关键参数是是什么，就会编译成相对应那一条less语句的css样式。&lt;/p&gt;
&lt;h4&gt;1.5 运算&lt;/h4&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;1&lt;/span&gt;
&lt;span class="code-line"&gt;2&lt;/span&gt;
&lt;span class="code-line"&gt;3&lt;/span&gt;
&lt;span class="code-line"&gt;4&lt;/span&gt;
&lt;span class="code-line"&gt;5&lt;/span&gt;
&lt;span class="code-line"&gt;6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;@test_01&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;300px&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;box_02&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="err"&gt;width&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="err"&gt;(@test_01&lt;/span&gt; &lt;span class="err"&gt;-&lt;/span&gt; &lt;span class="err"&gt;20)&lt;/span&gt; &lt;span class="err"&gt;*&lt;/span&gt; &lt;span class="err"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#ccc&lt;/span&gt; &lt;span class="mi"&gt;-10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;这个比较简单易懂。&lt;/p&gt;
&lt;h4&gt;1.6 嵌套&lt;/h4&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;1&lt;/span&gt;
&lt;span class="code-line"&gt;2&lt;/span&gt;
&lt;span class="code-line"&gt;3&lt;/span&gt;
&lt;span class="code-line"&gt;4&lt;/span&gt;
&lt;span class="code-line"&gt;5&lt;/span&gt;
&lt;span class="code-line"&gt;6&lt;/span&gt;
&lt;span class="code-line"&gt;7&lt;/span&gt;
&lt;span class="code-line"&gt;8&lt;/span&gt;
&lt;span class="code-line"&gt;9&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;list&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;600&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="err"&gt;li&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="err"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;float&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;嵌套也只是一种简易写法，还是要根据实际情况来写。还有一种CSS事件的写法：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;1&lt;/span&gt;
&lt;span class="code-line"&gt;2&lt;/span&gt;
&lt;span class="code-line"&gt;3&lt;/span&gt;
&lt;span class="code-line"&gt;4&lt;/span&gt;
&lt;span class="code-line"&gt;5&lt;/span&gt;
&lt;span class="code-line"&gt;6&lt;/span&gt;
&lt;span class="code-line"&gt;7&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;float&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="err"&gt;//&lt;/span&gt; &lt;span class="err"&gt;&amp;amp;&lt;/span&gt; &lt;span class="err"&gt;代表上一层选择器&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="err"&gt;&amp;amp;:hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;red&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;这个真的是造福后端狗啊。&lt;/p&gt;
&lt;h4&gt;1.7 @arguments变量&lt;/h4&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;1&lt;/span&gt;
&lt;span class="code-line"&gt;2&lt;/span&gt;
&lt;span class="code-line"&gt;3&lt;/span&gt;
&lt;span class="code-line"&gt;4&lt;/span&gt;
&lt;span class="code-line"&gt;5&lt;/span&gt;
&lt;span class="code-line"&gt;6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;border_arg&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;@w&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;30px&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;@c&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;red&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;@xx&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;solid&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;test_argu&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="err"&gt;.border_arg()&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;另外在混合使用某个类的时候，需要修改某个参数，直接改就行了，less足够智能去识别。&lt;/p&gt;
&lt;h4&gt;1.8 其他&lt;/h4&gt;
&lt;h5&gt;1.8.1 避免编译&lt;/h5&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;1&lt;/span&gt;
&lt;span class="code-line"&gt;2&lt;/span&gt;
&lt;span class="code-line"&gt;3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;test&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;calc(300px - 30px)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;这样在编译的时候就直接输出为&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;1&lt;/span&gt;
&lt;span class="code-line"&gt;2&lt;/span&gt;
&lt;span class="code-line"&gt;3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;test&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;  &lt;span class="k"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h5&gt;1.8.2 !important&lt;/h5&gt;
&lt;p&gt;直接在混合后面加上该语句即可，可以自动全加上!important。&lt;/p&gt;</content><category term="Less"></category><category term="CSS"></category></entry><entry><title>《Python Web开发 测试驱动方法》基础篇带给我的思考</title><link href="http://www.pyloons.com/%E3%80%8Apython-web%E5%BC%80%E5%8F%91-%E6%B5%8B%E8%AF%95%E9%A9%B1%E5%8A%A8%E6%96%B9%E6%B3%95%E3%80%8B%E5%9F%BA%E7%A1%80%E7%AF%87%E5%B8%A6%E7%BB%99%E6%88%91%E7%9A%84%E6%80%9D%E8%80%83.html" rel="alternate"></link><published>2017-10-05T23:29:00+08:00</published><updated>2017-10-05T23:29:00+08:00</updated><author><name>Pyloons</name></author><id>tag:www.pyloons.com,2017-10-05:/《python-web开发-测试驱动方法》基础篇带给我的思考.html</id><summary type="html">&lt;p&gt;TDD对于一个没有接触过它的开发者来说，思路太过清奇，让人难以适应；另一方面，这却是许多前辈所说的“分解大问题，解决小问题”的最不费脑子的方法。&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="goat" src="http://pyloons.pythonanywhere.com/media/images/goat-2632143_960_720.2e16d0ba.fill-800x450.jpg"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;代码构建过程太过于繁复，我来记录一下心得体会好了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;​        从第一行代码开始，作者就开始了令我费解的繁复的测试，但我明白TDD确实是一种重要的开发技能，所以还是强忍着别扭敲了一遍书上的代码。&lt;/p&gt;
&lt;h3&gt;TDD的最核心的流程&lt;/h3&gt;
&lt;p&gt;​        在书上可以找到一个流程图，很好地说明了TDD究竟是一个什么样的开发流程。既然是测试推着开发走，那么开局最重要的自然是写测试。书中是从最简单的网页标题开始写的。&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;1&lt;/span&gt;
&lt;span class="code-line"&gt;2&lt;/span&gt;
&lt;span class="code-line"&gt;3&lt;/span&gt;
&lt;span class="code-line"&gt;4&lt;/span&gt;
&lt;span class="code-line"&gt;5&lt;/span&gt;
&lt;span class="code-line"&gt;6&lt;/span&gt;
&lt;span class="code-line"&gt;7&lt;/span&gt;
&lt;span class="code-line"&gt;8&lt;/span&gt;
&lt;span class="code-line"&gt;9&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!python&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;selenium&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;browser&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;webdriver&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Firefox&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;# 原书在这里挖了一个坑，火狐浏览器需要geckodriver才能启动&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http://localhost:8000&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Django&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;browser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;​        以及后文中类似的测试数不胜数。靠着这个，一步一步稳稳地开发出了清单应用的最小可用版本。&lt;/p&gt;
&lt;p&gt;​        写好了测试，自然就要运行它，一般情况下初次运行测试，得到的只有错误；请适应错误带来的打击，然后去解决这个错误。比如上面一段测试代码，如果写成一个Python脚本去运行，必然带来错误——毕竟连Django都没有安装，开发服务器也没有运行，怎么也不可能是对的。但是正如书本标题所说，测试驱动开发；现在测试出了问题，你必须用开发来解决这个问题，让测试不再出问题。&lt;/p&gt;
&lt;p&gt;​        这里必须说明的是，不是说测试出了问题，你就要大篇幅地写代码，完成这个功能——恰恰相反，你必须只写最小的代码，目的仅仅是让测试通过。你得忘记自己曾经是个什么样的开发者才行。于是在后文就有了类似于以下这样的代码：&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;1&lt;/span&gt;
&lt;span class="code-line"&gt;2&lt;/span&gt;
&lt;span class="code-line"&gt;3&lt;/span&gt;
&lt;span class="code-line"&gt;4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!python&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;# lists/views.py&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;home_page&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    &lt;span class="k"&gt;pass&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;​        什么都不做，就问你怕不怕！&lt;/p&gt;
&lt;p&gt;​        当然并不是真的什么都不做，尽管这种无意义的代码确实能通过之前那个测试报错，但是它必然会带来其他的问题，或者在另一个测试中引起问题——解决它是迟早要做的事，不要因为这个小瑕疵破坏了TDD帅气的姿势。&lt;/p&gt;
&lt;p&gt;​        再然后，如果测试全都通过了呢？单元测试无误，你还可以看看代码是不是可以优化呀？代码优化之后，是不是又报错了咯？如果不再报错，那功能测试是不是没问题咯？如果功能测试也没问题了，你是不是还要开发新功能或者强化现有功能咯？&lt;/p&gt;
&lt;p&gt;​        所以，测试推动开发进程，是一个无穷无尽的循环；如果把用户需求转化为功能测试，这个过程。它的技术并不复杂，挑战的是耐心和恒心。&lt;/p&gt;
&lt;h3&gt;现在是名词解释时间&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;用户故事 &lt;/strong&gt; 从用户的角度描述应用如何运行，来组织功能测试。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;功能测试  &lt;/strong&gt;从应用外部观察应用的运行，有很多名字，国内更喜欢用黑箱测试这个说法。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;预期失败&lt;/strong&gt;  意料之中的失败。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;意外失败  &lt;/strong&gt;测试在意料之外失败，通常认为是测试中有错误或者出现了一个回归引起的。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;回归  &lt;/strong&gt;新添加的代码破坏了原本正常的功能；一般这种情况需要重构旧的代码。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;其他收获&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;反复向本地git仓库提交代码，现在感觉git熟练度上升不少。&lt;/li&gt;
&lt;li&gt;为视图编写单元测试的基本三步：创建需要的对象实例、把这个实例提交给处理它的视图函数（或视图类）、使用断言测试处理结果。&lt;/li&gt;
&lt;li&gt;三角法——如果通过作弊手段就能通过测试，那就再写一个符合需求但不符合作弊手段的测试，让测试失败，强迫自己些更好的代码。&lt;/li&gt;
&lt;li&gt;事不过三，三则重构——如果一段代码让自己反复粘贴达三次，那么它需要重构，成为一个独立的模块&lt;/li&gt;
&lt;li&gt;待办事项清单可以很好的记录你的灵感和客户的需求，尽量都写在清单上比较好。&lt;/li&gt;
&lt;li&gt;测试隔离会更酷。&lt;/li&gt;
&lt;li&gt;不要编写多余的代码，尽管你觉得这些代码可能有用，但是不要写，因为YAGNI——You ain't gonna need it。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;结尾说明&lt;/h3&gt;
&lt;p&gt;​        并不觉得自己学懂了多少，毕竟思路与自己的习惯差距太大。不过TDD方法确实有它的独到之处，这本书还是要多看几遍才能掌握。&lt;/p&gt;</content><category term="Django"></category><category term="TDD"></category></entry></feed>